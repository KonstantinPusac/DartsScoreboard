@page "/PlayerStatistics/{playerId:int}"
@namespace DartsScoreboard

<MudButton Variant="Variant.Filled" Color="Color.Error" Style="margin-left: 20px; margin-top: 10px;" OnClick="GoBack">Back</MudButton>
<MudText Typo="Typo.h4" Class="m-4">Player stats</MudText>

@if (Player == null)
{
    <p>Loading player...</p>
}
else
{
    <MudCard Class="m-4 pa-4 my-3">
        <MudCardContent>
            <MudText Typo="Typo.h4">@Player.Name</MudText>

            <MudText><strong>Checkout Percentage:</strong> @Player.Stats.CheckoutPercentage.ToString("F2")%</MudText>
            <MudText><strong>Three Dart Average:</strong> @Player.Stats.ThreeDartAverage.ToString("F2")</MudText>
            <MudText><strong>Darts Per Leg:</strong> @Player.Stats.DartsPerLeg.ToString()</MudText>
            <MudText><strong>Best 3-Dart Leg Average:</strong> @Player.Stats.BestThreeDartLegAverage.ToString("F2")</MudText>
            <MudText><strong>Number of Doubles Thrown:</strong> @Player.Stats.NumOfDoublesThrown</MudText>

            <MudText Typo="Typo.h6" Class="mt-4">High Score Hits</MudText>
            <MudList T="string" Dense="true" >
                @foreach (var kvp in Player.Stats.HighScoreHits)
                {
                    @if (kvp.Value > 0)
                    {
                        <MudListItem Class="tight-list-item">
                                <MudText>@kvp.Key: @kvp.Value</MudText>
                        </MudListItem>
                    }
                }
            </MudList>
        </MudCardContent>
    </MudCard>
    @if (Player.GameHistory != null && Player.GameHistory.Any())
    {

        <MudText Typo="Typo.h4" Class="m-4">Game history</MudText>
        <table class="table table-striped" style="margin-left: 20px; margin-right: 20px;max-width: 95%;">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Starting Score</th>
                    <th>3-Dart Avg</th>
                    <th>Checkout %</th>
                    <th>Total Darts</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var game in Player.GameHistory.OrderByDescending(g => g.Timestamp))
                {
                    <tr>
                        <td>@game.Timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
						<td>@game.GameStartingScore</td>
                        <td>@game.OldThreeDartAverage.ToString("F2")</td>
                        <td>@game.OldCheckoutPercentage.ToString("F2")%</td>
                        <td>@game.OldTotalDartsThrown</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No previous games found.</p>
    }
}

@code {
	[Parameter] public int playerId { get; set; }
    [Inject] public NavigationManager NavManager { get; set; } = default!;
    [Inject] public IUserPersistence _UserPersistence { get; set; } = default!;

    public User? Player { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Player = await _UserPersistence.GetUser(playerId);
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/PlayersStats");
    }
}
