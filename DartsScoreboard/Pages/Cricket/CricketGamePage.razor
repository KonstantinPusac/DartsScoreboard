@page "/cricket/{gameCode}"
@namespace DartsScoreboard
@using Microsoft.AspNetCore.Components
@if (Loaded)
{

    <div class="container"> 
        <div class="score-table">
            <table>
                <thead>
                    <tr>
                        <th>Player</th>
                        <th>20</th>
                        <th>19</th>
                        <th>18</th>
                        <th>17</th>
                        <th>16</th>
                        <th>15</th>
                        <th>Bull</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in Players)
                    {
                        <tr class="@GetClass(player)">
                            <td>@player.Name</td>
                            @foreach (var score in player.Scores)
                            {
                                <td>
                                    @{
                                        int scoreCount = GetTableScore(player, score);
                                        var icon = GetSvgIcon(scoreCount);
                                    }
                                    @if (scoreCount > 0)
                                    {
                                        <span class="cricket-svg-icon" aria-hidden="true">@icon</span>
                                    }
                                </td>
                            }
                            <td>@(CalculatePoints(player))</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="player-info-section">
            <!-- Active Player Section -->
            <div class="active-player-section">
                <h2 class="active-player-name">@PlayerOnTurn.Name</h2>
            </div>

            <!-- Result Cards -->
            <div class="result-cards">
                <div class="result-card points-card @(CurrentPlayerDeficit > 0 ? "positive" : CurrentPlayerDeficit < 0 ? "negative" : "zero")">
                    <div class="card-label">Current</div>
                    <div class="card-value">@(CurrentPlayerDeficit >= 0 ? "+" : "")@CurrentPlayerDeficit pts</div>
                </div>
                
                <div class="result-card marks-card">
                    <div class="card-label">Marks</div>
                    <div class="card-value">@CurrentPlayerMarks</div>
                </div>
                
                <div class="result-card points-total-card">
                    <div class="card-label">Points</div>
                    <div class="card-value">@CurrentThrowPoints</div>
                </div>
            </div>

            <!-- Round Statistics -->
            <div class="round-statistics">
                <div class="stat-item">
                    <div class="stat-label">round</div>
                    <div class="stat-value">@Round</div>
                </div>
                <div class="stat-item">
                    <div class="stat-label">mks/r</div>
                    <div class="stat-value">@GetMarksPerRound()</div>
                </div> 
                <div class="stat-item">
                    <div class="stat-label">leg mks/r</div>
                    <div class="stat-value">@GetLegMarksPerRound()</div>
                </div> 
                <div class="stat-item">
                    <div class="stat-label">mks</div>
                    <div class="stat-value">@GetTotalMarks()/21</div>
                </div>
            </div>
        </div>

            <div class="keyboard-wrapper">
                <Keyboard KeyboardParameters="KeyboardParameters" KeyClick="KeyboardClick" />
            </div>
        </div> 
}

@code {
    private int CurrentPlayerDeficit = 0;
    private int CurrentPlayerMarks = 0;
    private int CurrentThrowPoints = 0;
    private string StatisticsSummary = "";

    private static string SanitizeSvg(string svg)
    {
        // Normalize tag and attribute spacing from stored strings
        return svg
            .Replace("< svg", "<svg")
            .Replace("</ svg", "</svg")
            .Replace("< line", "<line")
            .Replace("< circle", "<circle")
            .Replace("stroke - width", "stroke-width")
            .Replace(" = ", "=")
            .Replace("> ", ">")
            .Replace(" <", "<");
    }

    private MarkupString GetSvgIcon(int scoreCount)
    {
        return scoreCount switch
        {
            1 => new MarkupString(SanitizeSvg(CricketIcons.OneMark)),
            2 => new MarkupString(SanitizeSvg(CricketIcons.TwoMarks)),
            >= 3 => new MarkupString(SanitizeSvg(CricketIcons.ThreeMarks)),
            _ => default
        };
    }

    private string GetMarksPerRound()
    {
        if (Round == 0) return "0.0";
        int totalMarks = PlayerOnTurn.Throws.Sum(t => t.Score.Sum(s => s.Count)) + CurrentThrow.Score.Count;
        return (totalMarks / (double)Round).ToString("0.0");
    }
    private string GetLegMarksPerRound()
    {
        if (Round == 0) return "0.0";
        int totalMarks = PlayerOnTurn.Throws.Sum(t => t.Score.Sum(s => s.Count)) + CurrentThrow.Score.Count;
        return (totalMarks / (double)Round).ToString("0.0");
    }
     
    private int GetTotalMarks()
    {
        var targets = new[] { "20", "19", "18", "17", "16", "15", "BULL" };
        int total = 0;
        foreach (var target in targets)
        {
            int currentMarks = PlayerOnTurn.Scores.GetValueOrDefault(target, 0) + 
                              CurrentThrow.Score.Count(s => s.Target == target);
            total += Math.Min(3, currentMarks);
        }
        return total;
    }
}                                       